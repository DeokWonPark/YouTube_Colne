[{"C:\\Users\\ghrnr\\Documents\\Front-end-Study\\ReactStudy\\templete\\src\\index.js":"1","C:\\Users\\ghrnr\\Documents\\Front-end-Study\\ReactStudy\\templete\\src\\app.jsx":"2","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\index.js":"3","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\app.jsx":"4","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\header.jsx":"5","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\videos.jsx":"6","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\video.jsx":"7","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\sidebar.jsx":"8","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\videoView.jsx":"9","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\videoInfo.jsx":"10","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\sideVideo.jsx":"11","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\view.jsx":"12","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\subscribebar.jsx":"13"},{"size":220,"mtime":1610680800521,"results":"14","hashOfConfig":"15"},{"size":89,"mtime":1610681071769,"results":"16","hashOfConfig":"15"},{"size":270,"mtime":1611155612301,"results":"17","hashOfConfig":"18"},{"size":12298,"mtime":1611844358889,"results":"19","hashOfConfig":"18"},{"size":2613,"mtime":1611845067677,"results":"20","hashOfConfig":"18"},{"size":924,"mtime":1611795362476,"results":"21","hashOfConfig":"18"},{"size":1050,"mtime":1611838727632,"results":"22","hashOfConfig":"18"},{"size":2684,"mtime":1611845188068,"results":"23","hashOfConfig":"18"},{"size":272,"mtime":1611840387917,"results":"24","hashOfConfig":"18"},{"size":3126,"mtime":1611840792384,"results":"25","hashOfConfig":"18"},{"size":907,"mtime":1611579420967,"results":"26","hashOfConfig":"18"},{"size":695,"mtime":1611805597002,"results":"27","hashOfConfig":"18"},{"size":921,"mtime":1611809181445,"results":"28","hashOfConfig":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1h8rn0w",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"105b95b",{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"C:\\Users\\ghrnr\\Documents\\Front-end-Study\\ReactStudy\\templete\\src\\index.js",[],"C:\\Users\\ghrnr\\Documents\\Front-end-Study\\ReactStudy\\templete\\src\\app.jsx",[],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\index.js",[],["65","66"],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\app.jsx",["67","68","69","70"],"import React, { Component } from 'react';\nimport './app.css';\nimport Header from './components/header';\nimport Videos from './components/videos';\nimport Sidebar from './components/sidebar'\nimport View from './components/view';\n\nclass App extends Component {\n  state={\n    videos:[\n\n    ],\n    subscribe:[\n\n    ],\n    video_info:{},\n    View:<></>,\n    toggle:false,\n    auth:null,\n  }\n\n  APIKEY=process.env.REACT_APP_API_KEY;\n  API_CLIENT_ID=process.env.REACT_APP_CLIENT_ID;\n\n  GETResponse=(uri,callback)=>{\n    const requestOptions = {\n      method: 'GET',\n      redirect: 'follow'\n    };\n\n    fetch(uri, requestOptions)\n      .then(response => response.json())\n      .then((result) => {\n        const promises=[];\n        result.items.map((item)=>{\n          promises.push(this.LoadChannelItems(item.snippet.channelId,item)); //수행할 비동기 함수들을 삽입\n        });\n    \n        Promise.all(promises).then((values)=> callback(values)); //병렬적으로 비동기 함수 실행\n      })\n      .catch(error => console.log('error', error));\n  }\n\n  LoadChannelItems=async (channelId,item)=>{\n    const requestOptions = {\n      method: 'GET',\n      redirect: 'follow'\n    };\n    \n     await fetch(`https://www.googleapis.com/youtube/v3/channels?part=snippet&id=${channelId}&key=${this.APIKEY}`, requestOptions)\n      .then((response) => response.json())\n      .then((result) => {\n        item.snippet.channels=result.items[0].snippet.thumbnails.medium.url;\n        item.snippet.channel_description=result.items[0].snippet.description;\n      })\n      .catch(error => console.log('error', error));\n    \n      return new Promise((resolve,reject)=>{\n        resolve(item);\n      })\n  }\n\n  LoadVideoItems=()=>{\n    const uri=`https://www.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&maxResults=25&regionCode=kr&key=${this.APIKEY}`;\n    this.GETResponse(uri,(values)=>{this.setState({videos:values})});\n  }\n\n  SearchVideoItem=(text)=>{\n    if(this.dftRef.current.style.display===\"none\"){\n          this.handleMainView();\n    }\n    const uri=`https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=15&q=${text}&type=video&regionCode=kr&key=${this.APIKEY}`;\n    this.GETResponse(uri,(values)=>{\n              const videos=[...values];\n              this.setState({videos});\n    });\n  }\n\n  LoadSubscribe=async ()=>{\n    if(this.state.auth===null){\n      return;\n    }\n    const requestOptions = {\n      method: 'GET',\n      redirect: 'follow'\n    };\n   \n    await fetch(`https://www.googleapis.com/youtube/v3/subscriptions?part=snippet&mine=true&maxResults=50&access_token=${this.state.auth}`, requestOptions)\n      .then(response => response.json())\n      .then((result) => {\n        const subscribe=[...result.items];\n        this.setState({subscribe});\n      })\n      .catch(error => console.log('error', error));\n  }\n\n  handleSucribeClick=(item)=>{\n    if(this.dftRef.current.style.display===\"none\"){\n      this.handleMainView();\n    }\n    const uri=`https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${item.snippet.resourceId.channelId}&maxResults=10&key=${this.APIKEY}`;\n    this.GETResponse(uri,(values)=>{\n              const videos=[...values];\n              this.setState({videos});\n    });\n  }\n\n  handleLikeVideo=()=>{\n    if(this.state.auth==null){\n      this.oauthSignIn();\n      return;\n    }\n    if(this.dftRef.current.style.display===\"none\"){\n      this.handleMainView();\n    }\n    const uri=`https://www.googleapis.com/youtube/v3/videos?part=snippet&myRating=like&maxResult=3&access_token=${this.state.auth}`;\n    this.GETResponse(uri,(values)=>{\n              const videos=[...values];\n              this.setState({videos});\n    });\n  }\n  \n  subscribeInsert=async (channelId)=>{\n      const myHeaders = new Headers();\n      myHeaders.append(\"Authorization\", `Bearer ${this.state.auth}`);\n      myHeaders.append(\"Content-Type\", \"text/plain\");\n\n      const value={\n        snippet:{\n          resourceId:{\n            channelId:channelId\n          }\n        }\n      }\n\n      const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: JSON.stringify(value),\n        redirect: 'follow'\n      };\n\n      let status=null;\n\n      await fetch(\"https://www.googleapis.com/youtube/v3/subscriptions?part=snippet\", requestOptions)\n        .then(response => response.status)\n        .then(result=> status=Number.parseInt(result))\n        .catch(error => console.log('error', error));\n\n        return status;\n  }\n\n  subscribeDelete=async (issubscribe)=>{\n    const myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", `Bearer ${this.state.auth}`);\n\n    const requestOptions = {\n      method: 'DELETE',\n      headers: myHeaders,\n      redirect: 'follow'\n    };\n\n    let status=null;\n\n    await fetch(`https://www.googleapis.com/youtube/v3/subscriptions?id=${issubscribe}`, requestOptions)\n      .then(response => response.status)\n      .then(result=> status=status=Number.parseInt(result))\n      .catch(error => console.log('error', error));\n\n      return status;\n  }\n  \n  handleSubscribe=async (issubscribe,channelId)=>{ \n    if(this.state.auth===null){\n      this.oauthSignIn();\n    }\n    if(issubscribe===null){\n      //post\n      const status=await this.subscribeInsert(channelId);\n      if(status<400){\n        await this.LoadSubscribe();\n        this.setState({View:<View \n          videos={this.state.videos} \n          video_info={this.state.video_info}\n          subscribe={this.state.subscribe} \n          onView={this.handleOtherVideoView}\n          onSubscribe={this.handleSubscribe}></View>});\n      }\n    }\n    else{\n      //delete\n      const status=await this.subscribeDelete(issubscribe);\n      if(status<400){\n        await this.LoadSubscribe();\n        this.setState({View:<View \n          videos={this.state.videos} \n          video_info={this.state.video_info}\n          subscribe={this.state.subscribe} \n          onView={this.handleOtherVideoView}\n          onSubscribe={this.handleSubscribe}></View>});\n      }\n    }\n  }\n\n  parseQueryString=()=>{\n    const fragmentString = window.location.hash.substring(1);\n    const params = {};\n    let token;\n    let regex = /([^&=]+)=([^&]*)/g, m;\n    while (m = regex.exec(fragmentString)) {\n      params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n    }\n    if (Object.keys(params).length > 0) {\n      localStorage.setItem('oauth2-params', JSON.stringify(params) );\n    }\n    if(localStorage.getItem('oauth2-params')!==null){\n      token= JSON.parse(localStorage.getItem('oauth2-params'))['access_token'];\n      this.setState({auth:token});\n    }\n  }\n\n  handleAuth=()=>{\n    if(this.state.auth===null){\n      this.oauthSignIn();\n    }\n    else{\n      this.oauthSignOut();\n    }\n  }\n\n  oauthSignIn=()=> {\n    const oauth2Endpoint = 'https://accounts.google.com/o/oauth2/v2/auth';\n  \n    const form = document.createElement('form');\n    form.setAttribute('method', 'GET');\n    form.setAttribute('action', oauth2Endpoint);\n    const scope=\"https://www.googleapis.com/auth/youtube https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtube.readonly https://www.googleapis.com/auth/youtubepartner\"\n\n    const params = {'client_id': this.API_CLIENT_ID,\n                  'redirect_uri': 'https://deokwonpark.github.io/YouTube_Colne/',\n                  'response_type': 'token',\n                  'scope': scope,\n                  'include_granted_scopes': 'true',\n                  'state': 'pass-through value'};\n  \n    for (let p in params) {\n      const input = document.createElement('input');\n      input.setAttribute('type', 'hidden');\n      input.setAttribute('name', p);\n      input.setAttribute('value', params[p]);\n      form.appendChild(input);\n    }\n  \n    document.body.appendChild(form);\n    form.submit();\n  }\n\n  oauthSignOut=()=>{\n    const revokeTokenEndpoint = 'https://oauth2.googleapis.com/revoke';\n\n    const form = document.createElement('form');\n    form.setAttribute('method', 'post');\n    form.setAttribute('action', revokeTokenEndpoint);\n\n    const tokenField = document.createElement('input');\n    tokenField.setAttribute('type', 'hidden');\n    tokenField.setAttribute('name', 'token');\n    tokenField.setAttribute('value', this.state.auth);\n    form.appendChild(tokenField);\n\n    document.body.appendChild(form);\n    form.submit();\n    localStorage.removeItem(\"oauth2-params\");\n    this.setState({auth:null});\n    window.location.assign(\"https://deokwonpark.github.io/YouTube_Colne/\");\n  }\n\n  dftRef=React.createRef();\n  viewRef=React.createRef();\n\n  handleVideoView=async (video)=>{\n    this.dftRef.current.style.display=\"none\";\n    this.viewRef.current.style.display=\"flex\";\n\n    const video_info={...video};\n    await this.setState({video_info});\n\n    this.setState({View:<View \n      videos={this.state.videos} \n      video_info={this.state.video_info}\n      subscribe={this.state.subscribe} \n      onView={this.handleOtherVideoView}\n      onSubscribe={this.handleSubscribe}></View>});\n\n    let player;\n\n    let id;\n    if(video.id instanceof Object){\n        id=video.id.videoId;\n    }\n    else{\n        id=video.id;\n    }\n\n    if(window.YT!=null){\n      player = new window.YT.Player('ytplayer', {\n        height: '100%',\n        width: '100%',\n        videoId: `${id}`,\n        playerVars:{\n          autoplay:1,\n        }\n      });\n    }\n    else{\n      const script=document.createElement('script');\n      script.src=\"https://www.youtube.com/player_api\";\n      script.classList.add(\"YouTube_api\");\n\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(script, firstScriptTag);\n\n      window.onYouTubePlayerAPIReady=()=>{\n        player = new window.YT.Player('ytplayer', {\n          height: '100%',\n          width: '100%',\n          videoId: `${id}`,\n          playerVars:{\n            autoplay:1,\n          }\n        });\n      }\n    }\n  }\n\n  handleOtherVideoView=async (video)=>{\n\n    const video_info={...video};\n    await this.setState({video_info});\n\n    this.setState({View:<></>});\n    this.setState({View:<View \n      videos={this.state.videos} \n      video_info={this.state.video_info}\n      subscribe={this.state.subscribe} \n      onView={this.handleOtherVideoView}\n      onSubscribe={this.handleSubscribe}></View>});\n    let player;\n\n    let id;\n    if(video.id instanceof Object){\n        id=video.id.videoId;\n    }\n    else{\n        id=video.id;\n    }\n\n    \n    player = new window.YT.Player('ytplayer', {\n      height: '100%',\n      width: '100%',\n      videoId: `${id}`,\n      playerVars:{\n        autoplay:1,\n      }\n    });\n    \n  }\n          \n  handleMainView=()=>{\n    this.dftRef.current.style.display=\"flex\";    \n    this.viewRef.current.style.display=\"none\";     \n    this.setState({View:<></>});\n  }                                \n\n  handleSearch=(text)=>{\n    this.SearchVideoItem(text);                           \n  }\n\n  handleToggle=()=>{\n    const flag=(this.state.toggle?false:true);\n    this.setState({toggle:flag});\n  }\n\n  async componentDidMount(){\n    this.LoadVideoItems();\n    await this.parseQueryString();\n    this.LoadSubscribe();\n  }\n                \n  render() {                      \n    return <div className=\"inner\">                   \n      <Header                                                   \n      onMainView={this.handleMainView}\n      onSearch={this.handleSearch} \n      onToggle={this.handleToggle}\n      onAuth={this.handleAuth}\n      auth={this.state.auth}                                                                                                  \n      ></Header>                                         \n      <section className=\"main\" ref={this.dftRef}>\n        <Sidebar \n        onCategory={this.handleSearch} \n        toggle={this.state.toggle} \n        auth={this.state.auth}\n        onAuth={this.oauthSignIn}\n        subscribe={this.state.subscribe}\n        onSubscribe={this.handleSucribeClick}\n        onLike={this.handleLikeVideo}\n        ></Sidebar>\n        <Videos videos={this.state.videos}      \n                onView={this.handleVideoView}>\n        </Videos>\n      </section>\n      <section className=\"videoView\" ref={this.viewRef}>\n        {this.state.View}\n      </section>\n    </div>\n  }\n}\n\nexport default App;\n\n",["71","72"],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\header.jsx",[],["73","74"],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\videos.jsx",["75"],"import React, { Component } from 'react';\r\nimport Video from './video';\r\nimport styles from '../css/videos.module.css';\r\n\r\nclass Videos extends Component {\r\n    render() {\r\n        let id;\r\n        if(this.props.videos)\r\n        return <section>\r\n            <ul className={styles.videos}>\r\n                {this.props.videos.map((item)=>{\r\n                    let id;\r\n                    if(item.id instanceof Object){\r\n                        id=item.id.videoId;\r\n                    }\r\n                    else{\r\n                        id=item.id;\r\n                    }\r\n\r\n                    return <Video\r\n                    info={item}\r\n                    key={id}\r\n                    onView={this.props.onView}\r\n                    view={false}\r\n                    >\r\n                    </Video>\r\n                }\r\n                )}\r\n            </ul>\r\n        </section>\r\n    }\r\n}\r\n\r\nexport default Videos;",["76","77"],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\video.jsx",[],["78","79"],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\sidebar.jsx",[],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\videoView.jsx",[],["80","81"],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\videoInfo.jsx",["82","83"],"import React, { PureComponent } from 'react';\r\nimport styles from '../css/videoInfo.module.css';\r\nimport classNames from 'classnames';\r\n\r\nclass VideoInfo extends PureComponent {\r\n\r\n    state={\r\n        issubscribe:null,\r\n    }\r\n\r\n    tags=[];\r\n    title=null;\r\n    date=null;\r\n    channelLogo=null;\r\n    channelTitle=null;\r\n    description=null;\r\n    SubBtn=React.createRef();\r\n\r\n    getProps=()=>{\r\n        this.tags=[];\r\n\r\n        if(Object.keys(this.props.info).length===0){\r\n            return;\r\n        }\r\n\r\n        for(let i in this.props.info.snippet.tags){\r\n            if(i>=5){\r\n                break;\r\n            }\r\n            this.tags.push(this.props.info.snippet.tags[i]);\r\n        }\r\n        this.title=this.props.info.snippet.title;\r\n        // this.date=this.props.info.snippet.publishedAt;\r\n        this.channelLogo=this.props.info.snippet.channels;\r\n        this.channelTitle=this.props.info.snippet.channelTitle;\r\n        this.description=this.props.info.snippet.channel_description;\r\n    }\r\n\r\n    isSubscribe=()=>{\r\n        let flag=false;\r\n        this.props.subscribe.map((item)=>{\r\n            if(item.snippet.resourceId.channelId===this.props.info.snippet.channelId){\r\n                this.setState({issubscribe:item.id});\r\n                flag=true;\r\n            }\r\n        });\r\n        if(!flag){\r\n            this.setState({issubscribe:null});\r\n        }\r\n    }\r\n\r\n    handleSubscribe=async ()=>{\r\n        this.SubBtn.current.setAttribute(\"disabled\",\"disabled\");\r\n        await this.props.onSubscribe(this.state.issubscribe,this.props.info.snippet.channelId);\r\n        this.isSubscribe();\r\n        this.SubBtn.current.removeAttribute(\"disabled\");\r\n    }\r\n    componentDidMount(){\r\n        this.isSubscribe();\r\n    }\r\n    render() {\r\n\r\n        {\r\n            this.getProps();\r\n        }\r\n\r\n        return <>\r\n        <div className={styles.video_info}>\r\n            <span className={styles.hash_tag}>\r\n                {this.tags.map((tag)=><button>#{tag}</button>)}\r\n            </span>\r\n            <h3 className={styles.video_title}>{this.title}</h3>\r\n            {/* <p>{this.date}</p> */}\r\n            <div className={styles.controlBtns}>\r\n                <button><i className=\"fas fa-thumbs-up\"></i></button>\r\n                <button><i className=\"fas fa-thumbs-down\"></i></button>\r\n                <button><i className=\"fas fa-share-square\"></i></button>\r\n                <button><i className=\"fas fa-folder-plus\"></i></button>\r\n            </div>\r\n        </div>\r\n        <hr/>\r\n        <div className={styles.channel_info}>\r\n            <div className={styles.channel_logo}>\r\n                <button className={styles.channel_img}><img src={this.channelLogo} alt=\"channel_logo\"/></button>\r\n                <p>{this.channelTitle}</p>\r\n            </div>\r\n            <button className={classNames(styles.subscribe, this.state.issubscribe?styles.subscribing:\"\")} onClick={this.handleSubscribe} ref={this.SubBtn}>구독</button>\r\n        </div>\r\n        <span className={styles.description}>\r\n            {this.description}\r\n        </span>\r\n        </>\r\n    }\r\n}\r\n\r\nexport default VideoInfo;","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\sideVideo.jsx",[],["84","85"],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\view.jsx",[],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\subscribebar.jsx",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":35,"column":32,"nodeType":"92","messageId":"93","endLine":35,"endColumn":34},{"ruleId":"94","severity":1,"message":"95","line":210,"column":12,"nodeType":"96","messageId":"97","endLine":210,"endColumn":42},{"ruleId":"98","severity":1,"message":"99","line":324,"column":9,"nodeType":"100","messageId":"101","endLine":324,"endColumn":15},{"ruleId":"98","severity":1,"message":"99","line":359,"column":5,"nodeType":"100","messageId":"101","endLine":359,"endColumn":11},{"ruleId":"86","replacedBy":"102"},{"ruleId":"88","replacedBy":"103"},{"ruleId":"86","replacedBy":"104"},{"ruleId":"88","replacedBy":"105"},{"ruleId":"98","severity":1,"message":"106","line":7,"column":13,"nodeType":"100","messageId":"101","endLine":7,"endColumn":15},{"ruleId":"86","replacedBy":"107"},{"ruleId":"88","replacedBy":"108"},{"ruleId":"86","replacedBy":"109"},{"ruleId":"88","replacedBy":"110"},{"ruleId":"86","replacedBy":"111"},{"ruleId":"88","replacedBy":"112"},{"ruleId":"90","severity":1,"message":"91","line":41,"column":40,"nodeType":"92","messageId":"93","endLine":41,"endColumn":42},{"ruleId":"113","severity":1,"message":"114","line":63,"column":9,"nodeType":"115","messageId":"116","endLine":65,"endColumn":10},{"ruleId":"86","replacedBy":"117"},{"ruleId":"88","replacedBy":"118"},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-unused-vars","'player' is assigned a value but never used.","Identifier","unusedVar",["119"],["120"],["119"],["120"],"'id' is defined but never used.",["119"],["120"],["119"],["120"],["119"],["120"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["119"],["120"],"no-global-assign","no-unsafe-negation"]