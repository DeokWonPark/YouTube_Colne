[{"C:\\Users\\ghrnr\\Documents\\Front-end-Study\\ReactStudy\\templete\\src\\index.js":"1","C:\\Users\\ghrnr\\Documents\\Front-end-Study\\ReactStudy\\templete\\src\\app.jsx":"2","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\index.js":"3","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\app.jsx":"4","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\header.jsx":"5","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\videos.jsx":"6","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\video.jsx":"7","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\sidebar.jsx":"8","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\videoView.jsx":"9","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\videoInfo.jsx":"10","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\sideVideo.jsx":"11","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\view.jsx":"12","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\subscribebar.jsx":"13","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\service\\youtube.js":"14","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\service\\oauth.js":"15"},{"size":220,"mtime":1610680800521,"results":"16","hashOfConfig":"17"},{"size":89,"mtime":1610681071769,"results":"18","hashOfConfig":"17"},{"size":493,"mtime":1612007795891,"results":"19","hashOfConfig":"20"},{"size":7238,"mtime":1612017062787,"results":"21","hashOfConfig":"20"},{"size":2613,"mtime":1611845067677,"results":"22","hashOfConfig":"20"},{"size":924,"mtime":1611795362476,"results":"23","hashOfConfig":"20"},{"size":1050,"mtime":1611838727632,"results":"24","hashOfConfig":"20"},{"size":2694,"mtime":1611845955364,"results":"25","hashOfConfig":"20"},{"size":272,"mtime":1611840387917,"results":"26","hashOfConfig":"20"},{"size":3126,"mtime":1611840792384,"results":"27","hashOfConfig":"20"},{"size":907,"mtime":1611579420967,"results":"28","hashOfConfig":"20"},{"size":695,"mtime":1611805597002,"results":"29","hashOfConfig":"20"},{"size":921,"mtime":1611809181445,"results":"30","hashOfConfig":"20"},{"size":4423,"mtime":1612016586641,"results":"31","hashOfConfig":"20"},{"size":1905,"mtime":1612017031701,"results":"32","hashOfConfig":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1h8rn0w",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"105b95b",{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ghrnr\\Documents\\Front-end-Study\\ReactStudy\\templete\\src\\index.js",[],"C:\\Users\\ghrnr\\Documents\\Front-end-Study\\ReactStudy\\templete\\src\\app.jsx",[],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\index.js",[],["73","74"],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\app.jsx",["75","76","77"],"import React, { Component } from 'react';\nimport './app.css';\nimport Header from './components/header';\nimport Videos from './components/videos';\nimport Sidebar from './components/sidebar'\nimport View from './components/view';\n\nclass App extends Component {\n  state={\n    videos:[],\n    subscribe:[],\n    video_info:{},\n    View:<></>,\n    toggle:false,\n    auth:null,\n  }\n\n  LoadSubscribe=async ()=>{\n    if(this.state.auth===null){\n      return;\n    }\n    const items=await this.props.youtube.LoadSubscribe(this.state.auth);\n    const subscribe=[...items];\n    this.setState({subscribe});\n    return;\n  }\n\n  handleSucribeClick=(item)=>{\n    if(this.dftRef.current.style.display===\"none\"){\n      this.handleMainView();\n    }\n\n    this.props.youtube.handleSucribeClick(item)\n    .then((values)=>{\n      const videos=[...values];\n      this.setState({videos});\n    });\n  }\n\n  handleLikeVideo=()=>{\n    if(this.state.auth==null){\n      this.props.oauth.oauthSignIn();\n      return;\n    }\n    if(this.dftRef.current.style.display===\"none\"){\n      this.handleMainView();\n    }\n\n    this.props.youtube.handleLikeVideo(this.state.auth)\n    .then((values)=>{\n      const videos=[...values];\n      this.setState({videos});\n    });\n  }\n  \n  handleSubscribe=async (issubscribe,channelId)=>{ \n    if(this.state.auth===null){\n      this.props.oauth.oauthSignIn();\n    }\n    if(issubscribe===null){\n      //post\n      const status=await this.props.youtube.subscribeInsert(channelId,this.state.auth);\n      if(status<400){\n        await this.LoadSubscribe();\n        this.setState({View:<View \n          videos={this.state.videos} \n          video_info={this.state.video_info}\n          subscribe={this.state.subscribe} \n          onView={this.handleOtherVideoView}\n          onSubscribe={this.handleSubscribe}></View>});\n      }\n    }\n    else{\n      //delete\n      const status=await this.props.youtube.subscribeDelete(issubscribe,this.state.auth);\n      if(status<400){\n        await this.LoadSubscribe();\n        this.setState({View:<View \n          videos={this.state.videos} \n          video_info={this.state.video_info}\n          subscribe={this.state.subscribe} \n          onView={this.handleOtherVideoView}\n          onSubscribe={this.handleSubscribe}></View>});\n      }\n    }\n  }\n\n  parseQueryString=()=>{\n    const fragmentString = window.location.hash.substring(1);\n    const params = {};\n    let token;\n    let regex = /([^&=]+)=([^&]*)/g, m;\n    while (m = regex.exec(fragmentString)) {\n      params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n    }\n    if (Object.keys(params).length > 0) {\n      localStorage.setItem('oauth2-params', JSON.stringify(params) );\n    }\n    if(localStorage.getItem('oauth2-params')!==null){\n      token= JSON.parse(localStorage.getItem('oauth2-params'))['access_token'];\n      this.setState({auth:token});\n    }\n  }\n\n  handleAuth=()=>{\n    if(this.state.auth===null){\n      this.props.oauth.oauthSignIn();\n    }\n    else{\n      this.props.oauth.oauthSignOut(this.state.auth);\n      localStorage.removeItem(\"oauth2-params\");\n      this.setState({auth:null});\n      window.location.assign(\"https://deokwonpark.github.io/YouTube_Colne/\");\n    }\n  }\n\n  dftRef=React.createRef();\n  viewRef=React.createRef();\n\n  handleVideoView=async (video)=>{\n    this.dftRef.current.style.display=\"none\";\n    this.viewRef.current.style.display=\"flex\";\n\n    const video_info={...video};\n    await this.setState({video_info});\n\n    this.setState({View:<View \n      videos={this.state.videos} \n      video_info={this.state.video_info}\n      subscribe={this.state.subscribe} \n      onView={this.handleOtherVideoView}\n      onSubscribe={this.handleSubscribe}></View>});\n\n    let player;\n\n    let id;\n    if(video.id instanceof Object){\n        id=video.id.videoId;\n    }\n    else{\n        id=video.id;\n    }\n\n    if(window.YT!=null){\n      player = new window.YT.Player('ytplayer', {\n        height: '100%',\n        width: '100%',\n        videoId: `${id}`,\n        playerVars:{\n          autoplay:1,\n        }\n      });\n    }\n    else{\n      const script=document.createElement('script');\n      script.src=\"https://www.youtube.com/player_api\";\n      script.classList.add(\"YouTube_api\");\n\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(script, firstScriptTag);\n\n      window.onYouTubePlayerAPIReady=()=>{\n        player = new window.YT.Player('ytplayer', {\n          height: '100%',\n          width: '100%',\n          videoId: `${id}`,\n          playerVars:{\n            autoplay:1,\n          }\n        });\n      }\n    }\n  }\n\n  handleOtherVideoView=async (video)=>{\n\n    const video_info={...video};\n    await this.setState({video_info});\n\n    this.setState({View:<></>});\n    this.setState({View:<View \n      videos={this.state.videos} \n      video_info={this.state.video_info}\n      subscribe={this.state.subscribe} \n      onView={this.handleOtherVideoView}\n      onSubscribe={this.handleSubscribe}></View>});\n    let player;\n\n    let id;\n    if(video.id instanceof Object){\n        id=video.id.videoId;\n    }\n    else{\n        id=video.id;\n    }\n\n    \n    player = new window.YT.Player('ytplayer', {\n      height: '100%',\n      width: '100%',\n      videoId: `${id}`,\n      playerVars:{\n        autoplay:1,\n      }\n    });\n    \n  }\n          \n  handleMainView=()=>{\n    this.dftRef.current.style.display=\"flex\";    \n    this.viewRef.current.style.display=\"none\";     \n    this.setState({View:<></>});\n  }                                \n\n  handleSearch=(text)=>{\n    if(this.dftRef.current.style.display===\"none\"){\n      this.handleMainView();\n    }\n    this.props.youtube.SearchVideoItem(text)\n    .then((values)=>{\n      const videos=[...values];\n      this.setState({videos});\n    });                           \n  }\n\n  handleToggle=()=>{\n    const flag=(this.state.toggle?false:true);\n    this.setState({toggle:flag});\n  }\n\n  async componentDidMount(){\n    this.props.youtube.LoadVideoItems()\n    .then((values)=>this.setState({videos:values}));\n\n    await this.parseQueryString();\n    this.LoadSubscribe();\n  }\n                \n  render() {                      \n    return <div className=\"inner\">                   \n      <Header                                                   \n      onMainView={this.handleMainView}\n      onSearch={this.handleSearch} \n      onToggle={this.handleToggle}\n      onAuth={this.handleAuth}\n      auth={this.state.auth}                                                                                                  \n      ></Header>                                         \n      <section className=\"main\" ref={this.dftRef}>\n        <Sidebar \n        onCategory={this.handleSearch} \n        toggle={this.state.toggle} \n        auth={this.state.auth}\n        onAuth={this.props.oauth.oauthSignIn}\n        subscribe={this.state.subscribe}\n        onSubscribe={this.handleSucribeClick}\n        onLike={this.handleLikeVideo}\n        ></Sidebar>\n        <Videos videos={this.state.videos}      \n                onView={this.handleVideoView}>\n        </Videos>\n      </section>\n      <section className=\"videoView\" ref={this.viewRef}>\n        {this.state.View}\n      </section>\n    </div>\n  }\n}\n\nexport default App;\n\n","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\header.jsx",[],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\videos.jsx",["78"],"import React, { Component } from 'react';\r\nimport Video from './video';\r\nimport styles from '../css/videos.module.css';\r\n\r\nclass Videos extends Component {\r\n    render() {\r\n        let id;\r\n        if(this.props.videos)\r\n        return <section>\r\n            <ul className={styles.videos}>\r\n                {this.props.videos.map((item)=>{\r\n                    let id;\r\n                    if(item.id instanceof Object){\r\n                        id=item.id.videoId;\r\n                    }\r\n                    else{\r\n                        id=item.id;\r\n                    }\r\n\r\n                    return <Video\r\n                    info={item}\r\n                    key={id}\r\n                    onView={this.props.onView}\r\n                    view={false}\r\n                    >\r\n                    </Video>\r\n                }\r\n                )}\r\n            </ul>\r\n        </section>\r\n    }\r\n}\r\n\r\nexport default Videos;","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\video.jsx",[],["79","80"],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\sidebar.jsx",[],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\videoView.jsx",[],["81","82"],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\videoInfo.jsx",["83","84"],"import React, { PureComponent } from 'react';\r\nimport styles from '../css/videoInfo.module.css';\r\nimport classNames from 'classnames';\r\n\r\nclass VideoInfo extends PureComponent {\r\n\r\n    state={\r\n        issubscribe:null,\r\n    }\r\n\r\n    tags=[];\r\n    title=null;\r\n    date=null;\r\n    channelLogo=null;\r\n    channelTitle=null;\r\n    description=null;\r\n    SubBtn=React.createRef();\r\n\r\n    getProps=()=>{\r\n        this.tags=[];\r\n\r\n        if(Object.keys(this.props.info).length===0){\r\n            return;\r\n        }\r\n\r\n        for(let i in this.props.info.snippet.tags){\r\n            if(i>=5){\r\n                break;\r\n            }\r\n            this.tags.push(this.props.info.snippet.tags[i]);\r\n        }\r\n        this.title=this.props.info.snippet.title;\r\n        // this.date=this.props.info.snippet.publishedAt;\r\n        this.channelLogo=this.props.info.snippet.channels;\r\n        this.channelTitle=this.props.info.snippet.channelTitle;\r\n        this.description=this.props.info.snippet.channel_description;\r\n    }\r\n\r\n    isSubscribe=()=>{\r\n        let flag=false;\r\n        this.props.subscribe.map((item)=>{\r\n            if(item.snippet.resourceId.channelId===this.props.info.snippet.channelId){\r\n                this.setState({issubscribe:item.id});\r\n                flag=true;\r\n            }\r\n        });\r\n        if(!flag){\r\n            this.setState({issubscribe:null});\r\n        }\r\n    }\r\n\r\n    handleSubscribe=async ()=>{\r\n        this.SubBtn.current.setAttribute(\"disabled\",\"disabled\");\r\n        await this.props.onSubscribe(this.state.issubscribe,this.props.info.snippet.channelId);\r\n        this.isSubscribe();\r\n        this.SubBtn.current.removeAttribute(\"disabled\");\r\n    }\r\n    componentDidMount(){\r\n        this.isSubscribe();\r\n    }\r\n    render() {\r\n\r\n        {\r\n            this.getProps();\r\n        }\r\n\r\n        return <>\r\n        <div className={styles.video_info}>\r\n            <span className={styles.hash_tag}>\r\n                {this.tags.map((tag)=><button>#{tag}</button>)}\r\n            </span>\r\n            <h3 className={styles.video_title}>{this.title}</h3>\r\n            {/* <p>{this.date}</p> */}\r\n            <div className={styles.controlBtns}>\r\n                <button><i className=\"fas fa-thumbs-up\"></i></button>\r\n                <button><i className=\"fas fa-thumbs-down\"></i></button>\r\n                <button><i className=\"fas fa-share-square\"></i></button>\r\n                <button><i className=\"fas fa-folder-plus\"></i></button>\r\n            </div>\r\n        </div>\r\n        <hr/>\r\n        <div className={styles.channel_info}>\r\n            <div className={styles.channel_logo}>\r\n                <button className={styles.channel_img}><img src={this.channelLogo} alt=\"channel_logo\"/></button>\r\n                <p>{this.channelTitle}</p>\r\n            </div>\r\n            <button className={classNames(styles.subscribe, this.state.issubscribe?styles.subscribing:\"\")} onClick={this.handleSubscribe} ref={this.SubBtn}>구독</button>\r\n        </div>\r\n        <span className={styles.description}>\r\n            {this.description}\r\n        </span>\r\n        </>\r\n    }\r\n}\r\n\r\nexport default VideoInfo;",["85","86"],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\sideVideo.jsx",[],["87","88"],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\view.jsx",[],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\components\\subscribebar.jsx",[],["89","90"],"C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\service\\youtube.js",["91"],"class Youtube{\r\n    constructor(key){\r\n        this.key=key;\r\n        this.getRequestOption={\r\n            method: 'GET',\r\n            redirect: 'follow'\r\n        }\r\n    }\r\n\r\n    async GETResponse(uri){\r\n        try {\r\n            const response = await fetch(uri, this.getRequestOption);\r\n            const result = await response.json();\r\n            const promises = [];\r\n            result.items.map((item) => {\r\n                promises.push(this.LoadChannelItems(item.snippet.channelId, item)); //수행할 비동기 함수들을 삽입\r\n            });\r\n\r\n            return Promise.all(promises).then((values) => values); //병렬적으로 비동기 함수 실행\r\n        } catch (error) {\r\n            return console.log('error', error);\r\n        }\r\n    }\r\n\r\n    async LoadChannelItems(channelId,item){\r\n        try{\r\n            const response=await fetch(`https://www.googleapis.com/youtube/v3/channels?part=snippet&id=${channelId}&key=${this.key}`, this.getRequestOption)\r\n            const result=await response.json();\r\n            item.snippet.channels=result.items[0].snippet.thumbnails.medium.url;\r\n            item.snippet.channel_description=result.items[0].snippet.description;\r\n        }catch(error){\r\n            console.log('error', error)\r\n        }\r\n        \r\n        return new Promise((resolve,reject)=>{\r\n            resolve(item);\r\n        });\r\n    }\r\n\r\n    async LoadVideoItems(){\r\n        const uri=`https://www.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&maxResults=25&regionCode=kr&key=${this.key}`;\r\n        const values = await this.GETResponse(uri);\r\n        return values;\r\n    }\r\n\r\n    async SearchVideoItem(text){\r\n        const uri=`https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=15&q=${text}&type=video&regionCode=kr&key=${this.key}`;\r\n        const values=this.GETResponse(uri);\r\n        return values;\r\n    }\r\n\r\n    async handleSucribeClick(item){\r\n        const uri=`https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${item.snippet.resourceId.channelId}&maxResults=10&key=${this.key}`;\r\n        const values=await this.GETResponse(uri);\r\n        return values;\r\n    }\r\n\r\n    async handleLikeVideo(auth){\r\n        const uri=`https://www.googleapis.com/youtube/v3/videos?part=snippet&myRating=like&maxResult=3&access_token=${auth}`;\r\n        const values=await this.GETResponse(uri)\r\n        return values;\r\n      }\r\n\r\n    async LoadSubscribe(auth){\r\n        try{\r\n            const response=await fetch(`https://www.googleapis.com/youtube/v3/subscriptions?part=snippet&mine=true&maxResults=50&access_token=${auth}`, this.getRequestOption)\r\n            const result=await response.json();\r\n            return result.items;\r\n        }catch(error){\r\n            console.log('error', error)\r\n        }  \r\n    }\r\n\r\n    async subscribeInsert(channelId,auth){\r\n        const myHeaders = new Headers();\r\n        myHeaders.append(\"Authorization\", `Bearer ${auth}`);\r\n        myHeaders.append(\"Content-Type\", \"text/plain\");\r\n  \r\n        const value={\r\n          snippet:{\r\n            resourceId:{\r\n              channelId:channelId\r\n            }\r\n          }\r\n        }\r\n  \r\n        const requestOptions = {\r\n          method: 'POST',\r\n          headers: myHeaders,\r\n          body: JSON.stringify(value),\r\n          redirect: 'follow'\r\n        };\r\n  \r\n        let status=null;\r\n  \r\n        try{\r\n            const response=await fetch(\"https://www.googleapis.com/youtube/v3/subscriptions?part=snippet\", requestOptions)\r\n            const result=await response.status;\r\n            status=Number.parseInt(result);\r\n        }catch(error){\r\n            console.log('error', error);\r\n        }\r\n        return status;\r\n    }\r\n\r\n    async subscribeDelete(issubscribe,auth){\r\n        const myHeaders = new Headers();\r\n        myHeaders.append(\"Authorization\", `Bearer ${auth}`);\r\n    \r\n        const requestOptions = {\r\n          method: 'DELETE',\r\n          headers: myHeaders,\r\n          redirect: 'follow'\r\n        };\r\n    \r\n        let status=null;\r\n    \r\n        try{\r\n            const response=await fetch(`https://www.googleapis.com/youtube/v3/subscriptions?id=${issubscribe}`, requestOptions)\r\n            const result=await response.status;\r\n            status=Number.parseInt(result);\r\n        }catch(error){\r\n            console.log('error', error);\r\n        }\r\n        return status;\r\n    }\r\n}\r\n\r\nexport default Youtube","C:\\Users\\ghrnr\\Documents\\YouTube_Clone\\src\\service\\oauth.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":93,"column":12,"nodeType":"98","messageId":"99","endLine":93,"endColumn":42},{"ruleId":"100","severity":1,"message":"101","line":163,"column":9,"nodeType":"102","messageId":"103","endLine":163,"endColumn":15},{"ruleId":"100","severity":1,"message":"101","line":198,"column":5,"nodeType":"102","messageId":"103","endLine":198,"endColumn":11},{"ruleId":"100","severity":1,"message":"104","line":7,"column":13,"nodeType":"102","messageId":"103","endLine":7,"endColumn":15},{"ruleId":"92","replacedBy":"105"},{"ruleId":"94","replacedBy":"106"},{"ruleId":"92","replacedBy":"107"},{"ruleId":"94","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":41,"column":40,"nodeType":"111","messageId":"112","endLine":41,"endColumn":42},{"ruleId":"113","severity":1,"message":"114","line":63,"column":9,"nodeType":"115","messageId":"116","endLine":65,"endColumn":10},{"ruleId":"92","replacedBy":"117"},{"ruleId":"94","replacedBy":"118"},{"ruleId":"92","replacedBy":"119"},{"ruleId":"94","replacedBy":"120"},{"ruleId":"92","replacedBy":"121"},{"ruleId":"94","replacedBy":"122"},{"ruleId":"109","severity":1,"message":"110","line":15,"column":37,"nodeType":"111","messageId":"112","endLine":15,"endColumn":39},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-unused-vars","'player' is assigned a value but never used.","Identifier","unusedVar","'id' is defined but never used.",["123"],["124"],["123"],["124"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["123"],["124"],["123"],["124"],["123"],["124"],"no-global-assign","no-unsafe-negation"]